const http = require('http');
const fs = require('fs');
const path = require('path');
const formidable = require("formidable");
const FormData = require("form-data");
const axios = require("axios");

// const TELEGRAM_BOT_TOKEN = '7634754756:AAFbVy0Eujw-rzcfeSvi4sAp1QU74znblXA';
// const TELEGRAM_USER_ID_FIRST = -1002888150428; // –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª/—á–∞—Ç (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
// const TELEGRAM_REQUESTS_CHAT_ID = -1002673909381; // –í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª/—á–∞—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π)

const TELEGRAM_BOT_TOKEN = '8054114971:AAE-25rC6uj0RX8_jafv0Aj6UD-hICbjxSA';
const TELEGRAM_USER_ID_FIRST = -1002534280928; // –ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª/—á–∞—Ç (—Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
const TELEGRAM_REQUESTS_CHAT_ID = -1002657965158; // –í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª/—á–∞—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π)

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const getTimestamp = () => new Date().toISOString();
const getClientInfo = (req) => {
    return {
        ip: req.connection.remoteAddress || req.socket.remoteAddress ||
                (req.connection.socket ? req.connection.socket.remoteAddress : null),
        userAgent: req.headers['user-agent'] || 'Unknown',
        referer: req.headers.referer || 'Direct',
        acceptLanguage: req.headers['accept-language'] || 'Unknown'
    };
};

const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};

const logRequest = (req, status, filePath, error = null, fileSize = null) => {
    const client = getClientInfo(req);
    const timestamp = getTimestamp();

    console.log(`\n${'='.repeat(80)}`);
    console.log(`[${timestamp}] REQUEST DETAILS`);
    console.log(`${'='.repeat(80)}`);
    console.log(`üåê URL: ${req.method} ${req.url}`);
    console.log(`üìç Client IP: ${client.ip}`);
    console.log(`üñ•Ô∏è  User Agent: ${client.userAgent}`);
    console.log(`üîó Referer: ${client.referer}`);
    console.log(`üåç Accept-Language: ${client.acceptLanguage}`);
    console.log(`üìÅ File Path: ${filePath}`);

    if (fileSize !== null) {
        console.log(`üìä File Size: ${formatFileSize(fileSize)}`);
    }

    console.log(`üìã Headers:`);
    Object.keys(req.headers).forEach(key => {
        console.log(`   ${key}: ${req.headers[key]}`);
    });

    if (status >= 200 && status < 300) {
        console.log(`‚úÖ Status: ${status} - SUCCESS`);
    } else if (status >= 300 && status < 400) {
        console.log(`‚Ü©Ô∏è  Status: ${status} - REDIRECT`);
    } else if (status >= 400 && status < 500) {
        console.log(`‚ö†Ô∏è  Status: ${status} - CLIENT ERROR`);
    } else if (status >= 500) {
        console.log(`‚ùå Status: ${status} - SERVER ERROR`);
    }

    if (error) {
        console.log(`üí• Error Details:`);
        console.log(`   Code: ${error.code || 'Unknown'}`);
        console.log(`   Message: ${error.message || 'Unknown error'}`);
        console.log(`   Stack: ${error.stack || 'No stack trace'}`);
    }

    console.log(`${'='.repeat(80)}\n`);
};

const PORT = 3000;
const DIST_DIR = path.join(__dirname, 'dist');
const PUBLIC_DIR = path.join(__dirname, 'public');

// MIME —Ç–∏–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const mimeTypes = {
    '.html': 'text/html',
    '.js': 'text/javascript',
    '.css': 'text/css',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.webm': 'video/webm',
    '.mp4': 'video/mp4',
    '.mov': 'video/quicktime',
    '.ico': 'image/x-icon',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf'
};

async function sendFileToTelegram(filePath, userId) {
    const form = new FormData();
    form.append('chat_id', userId);
    form.append('document', fs.createReadStream(filePath));
    // form.append('disable_notification', true)

    const response = await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`, form, {
        headers: {
            ...form.getHeaders(),
        },
    });

    return response.data.result.document.file_id; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º file_id
}

async function sendFileToTelegramById(fileId, chatId) {
    const response = await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`, {
        chat_id: chatId,
        document: fileId,
    });

    return await response.data.result; // –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

async function sendMessageToTelegram(chatId, text,) {
    const response = await axios.post(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        chat_id: chatId,
        text: text,
    });

    return await response.data.result;
}

const server = http.createServer((req, res) => {
    if (req.url === '/api/file' && req.method === 'POST') {

        const form = new formidable.IncomingForm();

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è –∏ —Ñ–∞–π–ª—ã
        // form.on('field', (name, value) => {
        //     console.log('–ü–æ–ª–µ:', name, value);
        // });

        // form.on('file', (name, file) => {
        //     console.log('–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:', {
        //         fieldName: name,
        //         originalName: file.originalFilename,
        //         tempPath: file.filepath,
        //         size: file.size,
        //         mimeType: file.mimetype
        //     });
        // });

        form.on('error', (err) => {
            console.error('–û—à–∏–±–∫–∞ formidable:', err);
        });

        form.parse(req, (err, fields, files) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', err);
                res.writeHead(500, {'Content-Type': 'application/json'});
                return res.end(JSON.stringify({error: 'Server error'}));
            }

            // console.log('Parsed fields:', fields);
            // console.log('Parsed files:', files);

            if (!files.file) { // –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º –ø–æ–ª–µ 'file'
                console.error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ');
                res.writeHead(400, {'Content-Type': 'application/json'});
                return res.end(JSON.stringify({error: 'File is required'}));
            }

            const receivedFile = files.file[0];
            console.log('–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç —Ñ–∞–π–ª:', receivedFile.originalFilename);
            console.log('–†–∞–∑–º–µ—Ä:', receivedFile.size);

            const filePath = receivedFile.originalFilename;

            const MAX_FILE_SIZE = 50 * 1024 * 1024; // 10MB
            if (receivedFile.size > MAX_FILE_SIZE) {
                res.writeHead(413, {'Content-Type': 'application/json'});
                return res.end(JSON.stringify({error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π'}));
            }

            // –ß–∏—Ç–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            fs.readFile(receivedFile.filepath, (err, data) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err);
                    res.writeHead(500, {'Content-Type': 'application/json'});
                    res.end(JSON.stringify({error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'}));
                    return;
                }

                const savePath = path.join(__dirname, receivedFile.originalFilename);

                fs.writeFile(savePath, data, async (err) => {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
                        res.writeHead(500, {'Content-Type': 'application/json'});
                        res.end(JSON.stringify({error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞'}));
                        return;
                    }

                    try {
                        const fileId = await sendFileToTelegram(filePath, TELEGRAM_USER_ID_FIRST);
                        // await sendFileToTelegramById(fileId, TELEGRAM_USER_ID_SECOND); // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await new Promise(resolve => setTimeout(resolve, 20000)); // 2 —Å–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è
                        fs.unlink(savePath, (unlinkError) => {
                            if (unlinkError) {
                                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', unlinkError);
                                // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                            } else {
                                console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', savePath);
                                res.writeHead(200, {'Content-Type': 'application/json'});
                                res.end(JSON.stringify({fileId}));
                            }
                        })
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram:', error);
                        res.writeHead(500, {'Content-Type': 'text/plain'});
                        res.end('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram');

                        fs.unlink(savePath, (unlinkError) => {
                            if (unlinkError) {
                                console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', unlinkError);
                                // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                            }
                        })
                    }

                });


            });

            // res.writeHead(200, {'Content-Type': 'application/json'});
            // res.end(JSON.stringify({
            //     success: true,
            //     filename: uploadedFile.originalFilename,
            //     size: uploadedFile.size
            // }));
        });
        return;
    }

    if (req.url === '/api/application' && req.method === 'POST') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å application/json)
        if (req.headers['content-type'] !== 'application/json') {
            res.writeHead(400, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({error: '–¢—Ä–µ–±—É–µ—Ç—Å—è Content-Type: application/json'}));
            return;
        }

        // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–ª–∏–∫–æ–º (–µ—Å–ª–∏ –æ–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–µ)
        const chunks = [];
        req.on('data', (chunk) => chunks.push(chunk));
        req.on('end', async () => {
            try {
                const jsonData = JSON.parse(Buffer.concat(chunks).toString());
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω JSON:', jsonData);

                let filesString = ''

                for (let i = 0; i < jsonData.filesArray.length; i++) {
                    filesString += `\n${i + 1}. ${jsonData.filesArray[i].name}`;
                }

                console.log('—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤: ', filesString);

                const msg = `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n–ò–º—è: ${jsonData.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${jsonData.phone}\n–ü–æ—á—Ç–∞: ${jsonData.email}\n–§–∞–π–ª–æ–≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: ${jsonData.filesArray ? jsonData.filesArray.length : '0'}\n–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: ${jsonData.description}\n–§–∞–π–ª—ã: ${filesString}`

                await sendMessageToTelegram(TELEGRAM_REQUESTS_CHAT_ID, msg);

                //sendMessageToTelegram(TELEGRAM_REQUESTS_CHAT_ID, msg)
                for (const fileData of jsonData.filesArray) {
                    await sendFileToTelegramById(fileData.tgId, TELEGRAM_REQUESTS_CHAT_ID)
                }
                // –û—Ç–≤–µ—á–∞–µ–º —É—Å–ø–µ—Ö–æ–º (200 OK)
                res.writeHead(200, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({success: true, data: jsonData}));
            } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', err);
                res.writeHead(400, {'Content-Type': 'application/json'});
                res.end(JSON.stringify({error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON'}));
            }
        });
        return;
    }


    // if (req.url === '/api/file' && req.method === 'POST') {
    //     console.log("–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞");
    //     return;
    // }
    //
    // if (req.url === '/api/application' && req.method === 'POST') {
    //     console.log("–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã");
    //     return
    // }

    const requestStartTime = Date.now();
    const timestamp = getTimestamp();

    console.log(`\nüöÄ [${timestamp}] Incoming request: ${req.method} ${req.url}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∏–∑ URL
    let filePath;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–ø–∫–µ dist (—Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
    if (req.url === '/') {
        filePath = path.join(DIST_DIR, 'index.html');
        console.log(`üìÇ Root request, serving index.html from: ${filePath}`);
    } else {
        // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º public, –ø–æ—Ç–æ–º dist
        const publicPath = path.join(PUBLIC_DIR, req.url);
        const distPath = path.join(DIST_DIR, req.url);

        console.log(`üîç Checking file existence:`);
        console.log(`   Public path: ${publicPath}`);
        console.log(`   Dist path: ${distPath}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ public –ø–∞–ø–∫–µ
        if (fs.existsSync(publicPath)) {
            filePath = publicPath;
            console.log(`‚úÖ Found in public directory: ${filePath}`);
        } else {
            filePath = distPath;
            console.log(`‚û°Ô∏è  Will try dist directory: ${filePath}`);
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const extname = path.extname(filePath).toLowerCase();
    console.log(`üìÑ File extension: ${extname || 'no extension'}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
    const contentType = mimeTypes[extname] || 'application/octet-stream';
    console.log(`üé≠ MIME type: ${contentType}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    fs.access(filePath, fs.constants.F_OK, (err) => {
        if (err) {
            console.log(`‚ùå File access error: ${err.message}`);

            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–¥–∞—Ç—å index.html (–¥–ª—è SPA)
            if (extname === '' || extname === '.html') {
                const fallbackPath = path.join(DIST_DIR, 'index.html');
                console.log(`üîÑ Trying fallback to index.html: ${fallbackPath}`);
                filePath = fallbackPath;
            } else {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 404 –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
                console.log(`üö´ Returning 404 for static file: ${req.url}`);
                const requestTime = Date.now() - requestStartTime;
                logRequest(req, 404, filePath, err); // –í–û–¢ –í–´–ó–û–í!
                console.log(`‚è±Ô∏è  Request completed in ${requestTime}ms`);

                res.writeHead(404, {'Content-Type': 'text/plain'});
                res.end('404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
        } else {
            console.log(`‚úÖ File exists and accessible: ${filePath}`);
        }

        // –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        console.log(`üìñ Reading file: ${filePath}`);

        fs.readFile(filePath, (error, content) => {
            const requestTime = Date.now() - requestStartTime;

            if (error) {
                console.log(`‚ùå Error reading file: ${error.message}`);

                if (error.code === 'ENOENT') {
                    logRequest(req, 404, filePath, error); // –í–û–¢ –í–´–ó–û–í!
                    console.log(`‚è±Ô∏è  Request completed in ${requestTime}ms`);
                    res.writeHead(404, {'Content-Type': 'text/plain'});
                    res.end('404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                } else {
                    logRequest(req, 500, filePath, error); // –í–û–¢ –í–´–ó–û–í!
                    console.log(`‚è±Ô∏è  Request completed in ${requestTime}ms`);
                    res.writeHead(500, {'Content-Type': 'text/plain'});
                    res.end('500 - –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                }
            } else {
                console.log(`‚úÖ File read successfully, content length: ${formatFileSize(content.length)}`);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                const headers = {
                    'Content-Type': contentType,
                    'Content-Length': content.length,
                    'Cache-Control': 'public, max-age=31536000'
                };

                // –î–ª—è HTML —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (contentType === 'text/html') {
                    headers['Cache-Control'] = 'no-cache, no-store, must-revalidate';
                    headers['Pragma'] = 'no-cache';
                    headers['Expires'] = '0';
                    console.log(`üö´ Caching disabled for HTML file`);
                } else {
                    console.log(`üíæ Caching enabled for static file (1 year)`);
                }

                console.log(`üì§ Response headers:`);
                Object.keys(headers).forEach(key => {
                    console.log(`   ${key}: ${headers[key]}`);
                });

                logRequest(req, 200, filePath, null, content.length); // –í–û–¢ –í–´–ó–û–í!
                console.log(`‚è±Ô∏è  Request completed in ${requestTime}ms`);

                res.writeHead(200, headers);
                res.end(content, 'utf-8');

                console.log(`‚úÖ Response sent successfully`);
            }
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.on('error', (err) => {
    console.error(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê [${getTimestamp()}]:`);
    console.error(`${'='.repeat(60)}`);
    console.error(`Code: ${err.code}`);
    console.error(`Message: ${err.message}`);
    console.error(`Stack: ${err.stack}`);
    console.error(`${'='.repeat(60)}\n`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
    const timestamp = getTimestamp();
    console.log(`\n${'üöÄ'.repeat(20)}`);
    console.log(`[${timestamp}] –°–ï–†–í–ï–† –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù`);
    console.log(`${'üöÄ'.repeat(20)}`);
    console.log(`üåê URL: http://localhost:${PORT}`);
    console.log(`üìÅ –ü–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤:`);
    console.log(`   üìÇ dist: ${DIST_DIR}`);
    console.log(`   üìÇ public: ${PUBLIC_DIR}`);
    console.log(`üìπ –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã: –ø–æ–º–µ—Å—Ç–∏—Ç–µ –≤ –ø–∞–ø–∫—É public/`);
    console.log(`\n‚ö° –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –∑–∞–ø—Ä–æ—Å–æ–≤...`);
    console.log(`${'='.repeat(60)}\n`);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});